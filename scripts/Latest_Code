#include <ros.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Int32.h>
#include <ros/time.h>
#include <tf/tf.h>
#include <tf/transform_broadcaster.h>
#include <ModbusMaster.h>  //Library for using ModbusMaster

ros::NodeHandle nh; //start ros node

//Hardware measurements
const float Dbase = 0.3; //distance between wheels in metres
const float dbase = Dbase/2;
const float wheelD = 0.165; //diameter of wheel
const float wheelR = wheelD/2;
const float dpr = 0.5307; //dist per rev of wheel
const float sum_enc = 4096*4; //total pulses per rev of encoder
const float rate_enc = (2*PI*wheelR) / sum_enc;

float angular_vel = 0.3;
float linear_vel = 0.5;
float Vright = 0.0; //Velocity of right wheel
float Vleft = 0.0; //Velocity of left wheel
float rpm_left = 0.0;
float rpm_right = 0.0;

//Motor variables , Common the DE and RE_NEG of BOTH motors
#define MAX485_DE      5                 //put for RSE pin
#define MAX485_RE_NEG  4
#define MAX485_DE2      6                //put for RSE pin
#define MAX485_RE_NEG2  5
const byte numChars = 32;
char receivedChars[numChars];   // an array to store the received data
float result;
float result2;

//Odom variables
volatile long inc_encL;
float enc_newL;
volatile long enc_oldL = 0;
volatile long inc_encR;
float enc_newR;
volatile long enc_oldR = 0;
float length_error;
float overflow_count_L;
float count_newticks_L;
float count_oldticks_L = 0;
float difference_L;

float overflow_count_R;
float count_newticks_R;
float count_oldticks_R = 0;
float difference_R;

float ang_z = 0.0;
float ang_z_error;
float Xw = 0.0;
float Yw = 0.0;
float delta_d;

char base_link[] = "/base_link";
char odom[] = "/odom";
unsigned long new_time;
unsigned long old_time;

//enc values
int encoderLB=2; 
int encoderLA=3; 
int encoderRB=21; 
int encoderRA=20;
volatile int lastEncoded = 0;
volatile long encoderValue;
volatile int lastEncoded2 = 0;
volatile long encoderValue2;

volatile long encoder_newValue;
volatile long encoder_newValue2;

//ROS receive cmd_vel data
void messageCb( const geometry_msgs::Twist &cmd_msg) {
angular_vel=cmd_msg.angular.z;
linear_vel=cmd_msg.linear.x;
unsigned long StartTime = millis();
}

ros::Subscriber<geometry_msgs::Twist> sub_vel("cmd_vel", &messageCb );
std_msgs::Float32 encL;
ros::Publisher encLPub("encL", &encL);
std_msgs::Float32 encR;
ros::Publisher encRPub("encR", &encR);


std_msgs::Float32 incencL;
ros::Publisher incencLPub("inc_encL", &incencL);
std_msgs::Float32 incencR;
ros::Publisher incencRPub("inc_encR", &incencR);


geometry_msgs::TransformStamped t;
tf::TransformBroadcaster broadcaster;

ModbusMaster node;                    //object node for class ModbusMaster
ModbusMaster node2; 

void preTransmission()            //Function for setting stste of Pins DE & RE of RS-485
{
  digitalWrite(MAX485_RE_NEG, 1);             
  digitalWrite(MAX485_DE, 1);
  digitalWrite(MAX485_RE_NEG2, 1);             
  digitalWrite(MAX485_DE2, 1);
}

void postTransmission()
{
  digitalWrite(MAX485_RE_NEG, 0);
  digitalWrite(MAX485_DE, 0);
  digitalWrite(MAX485_RE_NEG2, 0);
  digitalWrite(MAX485_DE2, 0);
}


void setup() {

  nh.initNode();
  nh.subscribe(sub_vel);
  nh.advertise(encRPub);
  nh.advertise(encLPub);
  nh.advertise(incencLPub);
  nh.advertise(incencRPub);
 
  pinMode(MAX485_RE_NEG, OUTPUT);
  pinMode(MAX485_DE, OUTPUT);
  pinMode(MAX485_RE_NEG2, OUTPUT);
  pinMode(MAX485_DE2, OUTPUT);
  digitalWrite(MAX485_RE_NEG, 0);
  digitalWrite(MAX485_DE, 0);
  digitalWrite(MAX485_RE_NEG2, 0);
  digitalWrite(MAX485_DE2, 0);
  Serial.begin(57600);
  Serial1.begin(9600);
  Serial3.begin(9600);             //Default Baud Rate of motor as 115200

  node.begin(2, Serial1);            //Slave ID as 4, serialport 3
  node2.begin(4, Serial3);
  node.preTransmission(preTransmission);         //Callback for configuring RS-485 Transreceiver correctly
  node2.preTransmission(preTransmission); //Callback for configuring RS-485 Transreceiver correctly
  node.postTransmission(postTransmission);
  node2.postTransmission(postTransmission);
  node.writeSingleRegister(0x2032,3); // operating mode, velocity mode
  node.writeSingleRegister(0x2031,8); // control, enable motor
  node.writeSingleRegister(0x2005,1);
  node2.writeSingleRegister(0x2032,3); // operating mode, velocity mode
  node2.writeSingleRegister(0x2031,8); // control, enable motor
  node2.writeSingleRegister(0x2005,1);
  
  pinMode(encoderLB, INPUT);
  pinMode(encoderLA, INPUT);
  pinMode(encoderRB, INPUT);
  pinMode(encoderRA, INPUT);

   
  attachInterrupt(digitalPinToInterrupt(encoderLA), updateEncoder, CHANGE); //left     //when i used encoderLB and encoderLA, does not interrupt 
  attachInterrupt(digitalPinToInterrupt(encoderLB), updateEncoder, CHANGE); //left     
  attachInterrupt(digitalPinToInterrupt(encoderRB), updateEncoder2, CHANGE); //right                  //uno only has 2 interrupt pins 2 & 3
  attachInterrupt(digitalPinToInterrupt(encoderRA), updateEncoder2, CHANGE); //right                  //mega has 6 interrupt pins 2 & 3 & 21 & 20 & 19 & 18 


}



unsigned long timeElapsed;


void loop() {

  /*
  Serial.println(node.getResponseBuffer(0));
  Serial.println(65535 - node2.getResponseBuffer(0));
  Serial.println(node.getResponseBuffer(1));
  Serial.println(node2.getResponseBuffer(1));
  Serial.print("angz and length ");
  Serial.println(ang_z_error,20);
  Serial.println(length_error,20);
  Serial.print("X-Direction ");
  Serial.println(Xw);
  Serial.print("Y-Direction ");
  Serial.println(Yw);*/
  
  //Calculate velocity of each wheel
  Vleft = linear_vel + (angular_vel * dbase);
  Vright = linear_vel - (angular_vel * dbase);
  //Calculate pwm to send to each motor
  rpm_left = Vleft * (60/dpr);
  rpm_right = Vright * (60/dpr);
  //rpm_left = -20;
  //rpm_right = -20;
  

  node.writeSingleRegister(0x203A,rpm_left); //target speed, rpm (negative)
  node2.writeSingleRegister(0x203A,rpm_right*-1); //target speed, rpm

  result = node.readHoldingRegisters(0x202A,2);
  result2 = node2.readHoldingRegisters(0x202A,2);

  new_time = millis();
  timeElapsed = new_time - old_time;

  //Calculate_Odom();

  Serial.print("This is encoder new value  ");
  Serial.println(inc_encL);
  //Serial.print("This is encoder old value  ");
  //Serial.println(enc_oldL);
  Serial.print("This is encoder2 new value  ");
  Serial.println(inc_encR);
  //Serial.print("This is encoder2 old value  ");
  //Serial.println(enc_oldR);
  
  Serial.println(Xw);
  Serial.print("This is Y ");
  Serial.println(length_error);
  Serial.println(ang_z_error);
  Serial.println(delta_d);

  
/*
  t.header.frame_id = odom;
  t.child_frame_id = base_link;
  
  t.transform.translation.x = Xw;
  t.transform.translation.y = Yw;
  
  t.transform.rotation = tf::createQuaternionFromYaw(ang_z);
  t.header.stamp = nh.now();
  
  broadcaster.sendTransform(t);
  nh.spinOnce();
  
  old_time = new_time;
 unsigned long currentTime = millis();
  if(timeElapsed >= 500)
  {  //might be broken
    linear_vel = 0;
    angular_vel = 0;
  }*/
   encoder_newValue = encoderValue;
   encoder_newValue2 = encoderValue2;

   inc_encL = encoder_newValue - enc_oldL;
   inc_encR = encoder_newValue2 - enc_oldR; 

  
   length_error = (inc_encR - inc_encL) * rate_enc;

   ang_z_error = length_error/(Dbase);
   ang_z = ang_z + ang_z_error;

   delta_d = ((inc_encL + inc_encR)/2) * rate_enc;

   Xw = Xw + (delta_d * cos(ang_z));
   Yw = Yw + (delta_d * sin(ang_z));

   
   enc_oldL = encoderValue;
   enc_oldR = encoderValue2;

 
 
  encR.data = node.getResponseBuffer(0);
  encRPub.publish( &encR);
  encL.data = overflow_count_L;
  encLPub.publish( &encL);
  incencL.data = delta_d;
  incencLPub.publish( &incencL);
  incencR.data = inc_encR;
  incencRPub.publish( &incencR);
  
 // nh.spinOnce();
  
}





/*
void Calculate_Odom()
{

   //encoder_newValue = encoderValue;
   //encoder_newValue2 = encoderValue2;
  
   inc_encL = encoderValue - enc_oldL;
   inc_encR = encoderValue2 - enc_oldR;   

   length_error = (inc_encR - inc_encL) * rate_enc;

   ang_z_error = length_error/(Dbase);
   ang_z = ang_z + ang_z_error;

   delta_d = ((inc_encL + inc_encR)/2) * rate_enc;

   Xw = Xw + (delta_d * cos(ang_z));
   Yw = Yw + (delta_d * sin(ang_z));

   encoderValue = enc_oldL;
   encoderValue2 = enc_oldR;
   

}*/

void updateEncoder(){
int MSB = digitalRead(encoderLB); //MSB = most significant bit
int LSB = digitalRead(encoderLA); //LSB = least significant bit
int encoded = (MSB << 1) |LSB; //converting the 2 pin value to single number
int sum = (lastEncoded << 2) | encoded; //adding it to the previous encoded value
if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) {encoderValue= encoderValue+1.;}
if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) {encoderValue= encoderValue-1;}
//17000 is the current 1 revolution encoder feedback with ch 1 as A-and ch2 as B+
lastEncoded = encoded; //store this value for next time
}


void updateEncoder2(){
int MSB = digitalRead(encoderRB); //MSB = most significant bit
int LSB = digitalRead(encoderRA); //LSB = least significant bit
int encoded2 = (MSB << 1) |LSB; //converting the 2 pin value to single number
int sum = (lastEncoded2 << 2) | encoded2; //adding it to the previous encoded value
if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) {encoderValue2= encoderValue2+1;}
if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) {encoderValue2= encoderValue2-1;}
//17000 is the current 1 revolution encoder feedback with ch 1 as A-and ch2 as B+
lastEncoded2 = encoded2; //store this value for next time
}