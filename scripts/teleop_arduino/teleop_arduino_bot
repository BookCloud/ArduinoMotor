#include <ModbusMaster.h>  //Library for using ModbusMaster
#include <ros.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/Twist.h>

ros::NodeHandle nh; //start ros node


#define MAX485_DE      3                 //put for RSE pin
#define MAX485_RE_NEG  2
#define MAX485_DE2      7                //put for RSE pin
#define MAX485_RE_NEG2  6
const byte numChars = 32;
char receivedChars[numChars];   // an array to store the received data

float angular_vel = 0.0;
float linear_vel = 0.0;
float Vright = 0.0; //Velocity of right wheel
float Vleft = 0.0; //Velocity of left wheel
int freq_left = 0;
int freq_right = 0;

const int encoderLB = 18;
const int encoderLA = 19;
volatile int lastEncoded = 0;
volatile long encoderValue = 0;

boolean newData = false;
String spd;
int pos;
int in =0;
ModbusMaster node;                    //object node for class ModbusMaster
ModbusMaster node2; 
void preTransmission()            //Function for setting stste of Pins DE & RE of RS-485
{
  digitalWrite(MAX485_RE_NEG, 1);             
  digitalWrite(MAX485_DE, 1);
  digitalWrite(MAX485_RE_NEG2, 1);             
  digitalWrite(MAX485_DE2, 1);
}

void postTransmission()
{
  digitalWrite(MAX485_RE_NEG, 0);
  digitalWrite(MAX485_DE, 0);
  digitalWrite(MAX485_RE_NEG2, 0);
  digitalWrite(MAX485_DE2, 0);
}

//ROS receive cmd_vel data
void messageCb( const geometry_msgs::Twist &cmd_msg) {
angular_vel=cmd_msg.angular.z;
linear_vel=cmd_msg.linear.x;
unsigned long StartTime = millis();
}

ros::Subscriber<geometry_msgs::Twist> sub_vel("cmd_vel", &messageCb );

void setup() {
  pinMode(MAX485_RE_NEG, OUTPUT);
  pinMode(MAX485_DE, OUTPUT);
  pinMode(MAX485_RE_NEG2, OUTPUT);
  pinMode(MAX485_DE2, OUTPUT);
  digitalWrite(MAX485_RE_NEG, 0);
  digitalWrite(MAX485_DE, 0);
  digitalWrite(MAX485_RE_NEG2, 0);
  digitalWrite(MAX485_DE2, 0);
  Serial.begin(9600);
  Serial1.begin(9600);
  Serial3.begin(9600);             //Default Baud Rate of motor as 115200

  pinMode(encoderLB, INPUT);
  pinMode(encoderLA, INPUT);
  //attachInterrupt(digitalPinToInterrupt(encoderLA), updateEncoder, CHANGE);
  //attachInterrupt(digitalPinToInterrupt(encoderLB), updateEncoder, CHANGE);
 

    node.begin(2, Serial3);            //Slave ID as 4, serialport 3
    node2.begin(4, Serial1);
  
  node.preTransmission(preTransmission);         //Callback for configuring RS-485 Transreceiver correctly
  node2.preTransmission(preTransmission); //Callback for configuring RS-485 Transreceiver correctly
  node.postTransmission(postTransmission);
  node2.postTransmission(postTransmission);
  node.writeSingleRegister(0x2032,3); // operating mode, velocity mode
  node.writeSingleRegister(0x2031,8); // control, enable motor
  node.writeSingleRegister(0x2005,1);
  node2.writeSingleRegister(0x2032,3); // operating mode, velocity mode
  node2.writeSingleRegister(0x2031,8); // control, enable motor
  node2.writeSingleRegister(0x2005,1);
  
    nh.initNode();
  nh.subscribe(sub_vel);

}


uint16_t result;
void loop() {

  Vleft = (linear_vel + (angular_vel*0.12)) * (60/0.5307);
Vright = (linear_vel - (angular_vel*0.12)) * (60/0.5307);
  
 node.writeSingleRegister(0x203A,Vright*-1); //target speed, rpm (negative)
  node2.writeSingleRegister(0x203A,Vleft); //target speed, rpm

   result = node.readHoldingRegisters(0x202A,2);
   result = node2.readHoldingRegisters(0x202A,2);

   Serial.println(node.getResponseBuffer(0));
   Serial.println(node.getResponseBuffer(1));
   Serial.println(node2.getResponseBuffer(0));
   Serial.println(node2.getResponseBuffer(1));

  nh.spinOnce();

}